diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..c2ab399
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,89 @@
+# Logs
+logs
+*.log
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+pnpm-debug.log*
+lerna-debug.log*
+
+# Diagnostic reports (https://nodejs.org/api/report.html)
+report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
+
+# Runtime data
+pids
+*.pid
+*.seed
+*.pid.lock
+
+# Directory for instrumented libs generated by jscoverage/JSCover
+lib-cov
+
+# Coverage directory used by tools like istanbul
+coverage
+*.lcov
+
+# nyc test coverage
+.nyc_output
+
+# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
+.grunt
+
+# Bower dependency directory (https://bower.io/)
+bower_components
+
+# node-waf configuration
+.lock-wscript
+
+# Compiled binary addons (https://nodejs.org/api/addons.html)
+build/Release
+
+# Dependency directories
+node_modules/
+jspm_packages/
+
+# Snowpack dependency directory (https://snowpack.dev/)
+web_modules/
+
+# TypeScript cache
+*.tsbuildinfo
+
+# Optional npm cache directory
+.npm
+
+# Optional eslint cache
+.eslintcache
+
+# Optional stylelint cache
+.stylelintcache
+
+# Microbundle cache
+.rpt2_cache/
+.rts2_cache_cjs/
+.rts2_cache_es/
+.rts2_cache_umd/
+
+# Optional REPL history
+.node_repl_history
+
+# Output of 'npm pack'
+*.tgz
+
+# Yarn Integrity file
+.yarnclean
+
+# dotenv environment variables file
+.env
+.env*.local
+.env.*.local
+
+# parcel-bundler cache files
+.parcel-cache
+
+# Vite build output
+dist
+dist-ssr
+*.local
+
+# Editor directories and files
+.vscode/*
+!.vscode/settings.json
+!.vscode/tasks.json
+!.vscode/launch.json
+!.vscode/extensions.json
+.idea
+*.sublime-workspace
+
+# System files
+.DS_Store
+Thumbs.db
diff --git a/ARCHITECTURE.md b/ARCHITECTURE.md
new file mode 100644
index 0000000..09e7037
--- /dev/null
+++ b/ARCHITECTURE.md
@@ -0,0 +1,95 @@
+# Arquitectura General
+
+La app está construida con Vite + React + TypeScript, TailwindCSS y shadcn/ui. El backend migrará de Supabase a una solución basada en MySQL y autenticación JWT.
+
+---
+
+### Gestión Financiera y Contable
+#### Registro automatizado de ingresos, gastos y transacciones bancarias
+- Permite registrar movimientos financieros en tiempo real con categorización automática. - - Ejemplo: Al recibir un pago por transferencia, el sistema lo detecta vía API y lo registra como ingreso. Tecnologías: APIs bancarias, cron jobs.
+#### Generación automática de estados financieros
+- Reportes como Balance General, Estado de Resultados y Flujo de Efectivo al cierre del mes.
+#### Análisis de rentabilidad y control de costos
+- Permite analizar eficiencia por proyecto, cliente o producto. Tecnologías: Recharts.
+#### Conciliaciones bancarias automáticas
+- Compara movimientos internos con estados bancarios para detectar diferencias.
+
+---
+
+### Cumplimiento Fiscal y Tributario
+- Cálculo automático de impuestos
+- Calcula ITBIS, ISR y otras obligaciones según la normativa dominicana. Tecnologías: reglas condicionales.
+#### Generación de declaraciones y reportes fiscales
+- Prepara formularios como 606 y 607 listos para la DGII.
+#### Alertas de vencimientos fiscales
+- Notifica fechas límite de declaraciones o pagos. Tecnologías: cron + notificaciones.
+#### Historial y auditoría de operaciones fiscales
+- Guarda trazabilidad completa de cada cambio o declaración.
+
+---
+
+### Control Presupuestario
+#### Creación y personalización del presupuesto anual
+- Define ingresos, gastos y metas por área. Ejemplo: $500,000 en ventas y $300,000 en costos.
+#### Monitoreo en tiempo real de desviaciones
+- Alertas cuando los gastos superan lo presupuestado.
+#### Comparación entre presupuestos proyectados vs ejecutados
+- Gráficas de lo planeado vs real. Tecnologías: Dashboards.
+
+---
+
+### Gestión de Nómina y Seguridad Social
+#### Cálculo automático de sueldos, bonificaciones y deducciones
+- Ejemplo: Sueldo de $25,000 con deducciones de AFP y bonificación.
+#### Retenciones y contribuciones laborales
+- Aplica descuentos como AFP, SFS. Tecnologías: motor de reglas.
+#### Generación de recibos de pago
+- Recibos PDF o imprimibles.
+#### Registro de empleados
+- Datos personales, historial de pagos, fechas de contratación.
+
+---
+
+### Relación con Bancos y Proveedores
+- Administración de cuentas por pagar y cobrar
+- Ejemplo: Cliente X debe RD$12,000 desde hace 15 días.
+#### Integración con APIs bancarias
+- Pagar facturas o sueldos directamente desde el sistema.
+#### Programación de pagos recurrentes
+- Ejemplo: Pago automático de servicios como luz o internet.
+
+---
+
+### Asesoría Financiera y Análisis de Datos
+#### Dashboard interactivo con análisis de tendencias
+- Gráficos de ventas, utilidad y gastos por categoría. Tecnologías: Recharts, Framer Motion.
+#### Reportes financieros avanzados
+- Exporta reportes personalizados para auditorías o socios.
+#### Recomendaciones basadas en IA
+- Sugiere mejoras financieras. Tecnologías: algoritmos ML simples.
+
+---
+
+### Módulo de Gestión de Vacaciones
+#### Solicitud de vacaciones automatizada
+- Los empleados pueden enviar solicitudes que deben ser aprobadas por un supervisor.
+#### Calendario de vacaciones por equipo o área
+- Visualización de quién está de vacaciones y cuándo.
+#### Cálculo de días acumulados y tomados
+- Basado en antigüedad y políticas internas.
+#### Historial y control de ausencias
+- Registro completo de vacaciones tomadas y pendientes.
+
+---
+
+### Migración de Supabase a MySQL
+#### Motivo de la migración
+- Mayor control sobre la base de datos, escalabilidad, reducción de costos.
+#### Estrategia de migración
+- Exportar datos de Supabase, modelar la base de datos en MySQL, importar datos y actualizar API.
+#### Autenticación basada en JWT
+- Sistema propio con tokens firmados y verificación en backend para acceso seguro.
+
+---
+
+## Principios y Patrones Aplicados
+
+Para mantener el código limpio, mantenible y escalable, se deben aplicar los siguientes principios y patrones:
+
+### Principios Generales
+- Encapsula todo el código: Expón únicamente lo necesario (mínima superficie pública).
+- Nombres descriptivos: Clases, funciones, props y variables deben indicar su propósito.
+- Funciones con propósito único: Cada función debe hacer una sola cosa.
+- Objetos inmutables: Evita efectos colaterales inesperados.
+- Manejo explícito de errores: Usa try/catch, validaciones y mensajes claros.
+- Evita anidación profunda: Usa early returns y composición funcional.
+- Evita duplicación de código: Extrae lógica repetida a funciones reutilizables.
+
+### Patrones de Diseño Recomendados
+#### SINGLETON
+- Garantiza una única instancia global compartida. Ideal para servicios como autenticación, configuración o logging.
+
+#### FACTORY
+- Centraliza la creación de objetos. Útil para generar distintos tipos de reportes o configuraciones dinámicas.
+
+#### OBSERVER
+- Permite que un objeto (sujeto) notifique a otros (observadores) cuando cambia. Útil para sistemas de notificaciones y dashboards reactivos.
+
+#### STRATEGY
+Permite intercambiar algoritmos en tiempo de ejecución. Ideal para cálculo de impuestos, nómina o recomendaciones financieras.
+
+#### DECORATOR
+- Añade funcionalidades extra a un objeto sin modificar su estructura. Útil para extender componentes visuales o middleware de API.
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..683397f
--- /dev/null
+++ b/README.md
@@ -0,0 +1,21 @@
+# JARSS - Sistema Integrado de Gestión Financiera y Administrativa
+
+Este proyecto es una aplicación integral para la gestión financiera, contable, fiscal, de nómina y más, construida con Vite, React, TypeScript, TailwindCSS y shadcn/ui.
+
+## Arquitectura General
+
+Consulte [ARCHITECTURE.md](./ARCHITECTURE.md) para obtener detalles sobre la arquitectura, los principios de diseño y los patrones utilizados.
+
+## Credenciales de Prueba (Desarrollo)
+
+-   **Nombre:** Admin Jarss
+-   **Email:** admin@jarss.com
+-   **Contraseña:** admin1234 (funcional en desarrollo)
+-   **Rol:** admin
+
+## Empezando
+
+1.  Clonar el repositorio.
+2.  Instalar dependencias: `bun install` (o `npm install` / `yarn install`)
+3.  Iniciar el servidor de desarrollo: `bun run dev` (o `npm run dev` / `yarn dev`)
+
+La aplicación estará disponible en `https://localhost:3000` (o el puerto configurado en `vite.config.ts`).
diff --git a/certs/localhost-cert.pem b/certs/localhost-cert.pem
new file mode 100644
index 0000000..4c82a99
--- /dev/null
+++ b/certs/localhost-cert.pem
@@ -0,0 +1,7 @@
+-----BEGIN CERTIFICATE-----
+MIIDazCCAlOgAwIBAgIUE8olVJBXiSvNp1Qs+gFaC3rP4nEwDQYJKoZIhvcNAQEL
+BQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM
+GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yMzA0MDEwMDAwMDBaFw0yNDA0
+EXAMPLE_CERT_ONLY_FOR_DEVELOPMENT_PURPOSES_REPLACE_WITH_REAL_CERT
+-----END CERTIFICATE-----
+
diff --git a/certs/localhost-key.pem b/certs/localhost-key.pem
new file mode 100644
index 0000000..713b581
--- /dev/null
+++ b/certs/localhost-key.pem
@@ -0,0 +1,7 @@
+-----BEGIN PRIVATE KEY-----
+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDFLFYvADQiWsJD
+K8YvQj0vbXOJi5xQkKBmVCJtBWK3hSiPNk4jUKtb1Pw+hpNSiYJFYU8uKbC0hHwS
+odCpJxs8YJFSRmSLpHGCr8Xv8QkZiH9yJl5qlpfJ8eiSGvUtxX7SOOv0Kh5nE9OI
+0iV3XZJ2Adk9iSZCq8Zy9p9jJVWXkb62jBMeEEpC/0VC0XqYzxqSSKrOXXHgZHAj
+EXAMPLE_KEY_ONLY_FOR_DEVELOPMENT_PURPOSES_REPLACE_WITH_REAL_KEY
+-----END PRIVATE KEY-----
+
diff --git a/components.json b/components.json
new file mode 100644
index 0000000..90c00d5
--- /dev/null
+++ b/components.json
@@ -0,0 +1,16 @@
+{
+  "$schema": "https://ui.shadcn.com/schema.json",
+  "style": "default",
+  "rsc": false,
+  "tsx": true,
+  "tailwind": {
+    "config": "tailwind.config.ts",
+    "css": "src/index.css",
+    "baseColor": "slate",
+    "cssVariables": true,
+    "prefix": ""
+  },
+  "aliases": {
+    "components": "@/components",
+    "utils": "@/lib/utils"
+  }
+}
diff --git a/eslint.config.js b/eslint.config.js
new file mode 100644
index 0000000..b934a8e
--- /dev/null
+++ b/eslint.config.js
@@ -0,0 +1,23 @@
+// eslint.config.js
+import globals from "globals";
+import pluginJs from "@eslint/js";
+import tseslint from "typescript-eslint";
+import pluginReactConfig from "eslint-plugin-react/configs/recommended.js";
+import reactHooks from "eslint-plugin-react-hooks";
+import reactRefresh from "eslint-plugin-react-refresh";
+
+export default [
+  { files: ["**/*.{js,mjs,cjs,ts,jsx,tsx}"], languageOptions: { globals: { ...globals.browser, ...globals.node } } },
+  pluginJs.configs.recommended,
+  ...tseslint.configs.recommended,
+  { files: ["**/*.{jsx,tsx}"], ...pluginReactConfig, settings: { react: { version: "detect" } } },
+  { files: ["**/*.{jsx,tsx}"], plugins: { "react-hooks": reactHooks }, rules: { "react-hooks/rules-of-hooks": "error", "react-hooks/exhaustive-deps": "warn" } },
+  { files: ["**/*.{jsx,tsx}"], plugins: { "react-refresh": reactRefresh }, rules: { "react-refresh/only-export-components": ["warn", { allowConstantExport: true }] } },
+  {
+    rules: {
+      // General rule adjustments
+      "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" }],
+      "@typescript-eslint/no-explicit-any": "warn"
+    }
+  }
+];
diff --git a/index.html b/index.html
new file mode 100644
index 0000000..3b8cc70
--- /dev/null
+++ b/index.html
@@ -0,0 +1,13 @@
+<!doctype html>
+<html lang="es">
+  <head>
+    <meta charset="UTF-8" />
+    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>JARSS - Gestión Financiera y Administrativa</title>
+  </head>
+  <body>
+    <div id="root"></div>
+    <script type="module" src="/src/main.tsx"></script>
+  </body>
+</html>
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..02164bb
--- /dev/null
+++ b/package.json
@@ -0,0 +1,37 @@
+{
+  "name": "jarss-app",
+  "private": true,
+  "version": "1.0.0",
+  "type": "module",
+  "scripts": {
+    "dev": "vite",
+    "build": "tsc && vite build",
+    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
+    "preview": "vite preview"
+  },
+  "dependencies": {
+    "@radix-ui/react-slot": "^1.0.2",
+    "class-variance-authority": "^0.7.0",
+    "clsx": "^2.1.0",
+    "lucide-react": "^0.378.0",
+    "react": "^18.2.0",
+    "react-dom": "^18.2.0",
+    "react-router-dom": "^6.23.0",
+    "recharts": "^2.12.7",
+    "tailwind-merge": "^2.3.0",
+    "tailwindcss-animate": "^1.0.7"
+  },
+  "devDependencies": {
+    "@eslint/js": "^9.3.0",
+    "@types/node": "^20.12.12",
+    "@types/react": "^18.2.66",
+    "@types/react-dom": "^18.2.22",
+    "@vitejs/plugin-react": "^4.2.1",
+    "autoprefixer": "^10.4.19",
+    "eslint": "^9.3.0",
+    "eslint-plugin-react": "^7.34.2",
+    "eslint-plugin-react-hooks": "^4.6.2",
+    "eslint-plugin-react-refresh": "^0.4.7",
+    "globals": "^15.3.0",
+    "postcss": "^8.4.38",
+    "tailwindcss": "^3.4.3",
+    "typescript": "^5.4.5",
+    "typescript-eslint": "^7.10.0",
+    "vite": "^5.2.0"
+  }
+}
diff --git a/postcss.config.js b/postcss.config.js
new file mode 100644
index 0000000..5ce204f
--- /dev/null
+++ b/postcss.config.js
@@ -0,0 +1,6 @@
+export default {
+  plugins: {
+    tailwindcss: {},
+    autoprefixer: {},
+  },
+}
diff --git a/public/favicon.ico b/public/favicon.ico
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/public/favicon.ico
diff --git a/public/placeholder.svg b/public/placeholder.svg
new file mode 100644
index 0000000..13a4fad
--- /dev/null
+++ b/public/placeholder.svg
@@ -0,0 +1,4 @@
+<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
+  <rect width="100" height="100" fill="#cccccc" />
+  <text x="50" y="55" font-family="Arial" font-size="14" text-anchor="middle" fill="#555555">Placeholder</text>
+</svg>
\ No newline at end of file
diff --git a/public/robots.txt b/public/robots.txt
new file mode 100644
index 0000000..f06b393
--- /dev/null
+++ b/public/robots.txt
@@ -0,0 +1,2 @@
+User-agent: *
+Disallow: /
diff --git a/src/App.css b/src/App.css
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/src/App.css
diff --git a/src/App.tsx b/src/App.tsx
new file mode 100644
index 0000000..786b0ab
--- /dev/null
+++ b/src/App.tsx
@@ -0,0 +1,20 @@
+import './App.css'
+import { Outlet, Route, Routes } from 'react-router-dom'
+import IndexPage from './pages/Index'
+import NotFoundPage from './pages/NotFound'
+import MainLayout from './components/layout/MainLayout'
+
+function App() {
+  return (
+    <Routes>
+      <Route element={<MainLayout><Outlet /></MainLayout>}>
+        <Route path="/" element={<IndexPage />} />
+        {/* Placeholder for other routes based on File Structure */}
+        {/* e.g. <Route path="/finanzas" element={<FinanzasPage />} /> */}
+      </Route>
+      <Route path="*" element={<NotFoundPage />} />
+    </Routes>
+  )
+}
+
+export default App
diff --git a/src/components/layout/MainLayout.tsx b/src/components/layout/MainLayout.tsx
new file mode 100644
index 0000000..85063db
--- /dev/null
+++ b/src/components/layout/MainLayout.tsx
@@ -0,0 +1,22 @@
+import React from 'react';
+// import Header from './Header'; // To be created based on full structure
+// import Sidebar from './Sidebar'; // To be created based on full structure
+
+interface MainLayoutProps {
+  children: React.ReactNode;
+}
+
+const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
+  return (
+    <div className="flex h-screen bg-gray-100 dark:bg-gray-900">
+      {/* Sidebar Placeholder - <Sidebar /> */}
+      <div className="flex-1 flex flex-col overflow-hidden">
+        {/* Header Placeholder - <Header /> */}
+        <header className="bg-white dark:bg-gray-700 shadow px-4 py-3 mb-4">
+          <p className="text-lg font-semibold text-center">JARSS - Application Header Placeholder</p>
+        </header>
+        <main className="flex-1 overflow-x-hidden overflow-y-auto p-6">{children}</main>
+      </div>
+    </div>
+  );
+};
+
+export default MainLayout;
diff --git a/src/components/theme-provider.tsx b/src/components/theme-provider.tsx
new file mode 100644
index 0000000..5de7153
--- /dev/null
+++ b/src/components/theme-provider.tsx
@@ -0,0 +1,49 @@
+import { createContext, useContext, useEffect, useState } from "react"
+
+type Theme = "dark" | "light" | "system"
+
+type ThemeProviderProps = {
+  children: React.ReactNode
+  defaultTheme?: Theme
+  storageKey?: string
+}
+
+type ThemeProviderState = {
+  theme: Theme
+  setTheme: (theme: Theme) => void
+}
+
+const initialState: ThemeProviderState = {
+  theme: "system",
+  setTheme: () => null,
+}
+
+const ThemeProviderContext = createContext<ThemeProviderState>(initialState)
+
+export function ThemeProvider({
+  children,
+  defaultTheme = "system",
+  storageKey = "vite-ui-theme",
+  ...props
+}: ThemeProviderProps) {
+  const [theme, setTheme] = useState<Theme>(
+    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
+  )
+
+  useEffect(() => {
+    const root = window.document.documentElement
+    root.classList.remove("light", "dark")
+
+    const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"
+    root.classList.add(theme === "system" ? systemTheme : theme)
+  }, [theme])
+
+  const value = {
+    theme,
+    setTheme: (newTheme: Theme) => {
+      localStorage.setItem(storageKey, newTheme)
+      setTheme(newTheme)
+    },
+  }
+
+  return <ThemeProviderContext.Provider {...props} value={value}>{children}</ThemeProviderContext.Provider>
+}
+
+export const useTheme = () => {
+  const context = useContext(ThemeProviderContext)
+  if (context === undefined) throw new Error("useTheme must be used within a ThemeProvider")
+  return context
+}
diff --git a/src/components/ui/button.tsx b/src/components/ui/button.tsx
new file mode 100644
index 0000000..7278463
--- /dev/null
+++ b/src/components/ui/button.tsx
@@ -0,0 +1,47 @@
+import * as React from "react"
+import { Slot } from "@radix-ui/react-slot"
+import { cva, type VariantProps } from "class-variance-authority"
+
+import { cn } from "@/lib/utils"
+
+const buttonVariants = cva(
+  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
+  {
+    variants: {
+      variant: {
+        default: "bg-primary text-primary-foreground hover:bg-primary/90",
+        destructive:
+          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
+        outline:
+          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
+        secondary:
+          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
+        ghost: "hover:bg-accent hover:text-accent-foreground",
+        link: "text-primary underline-offset-4 hover:underline",
+      },
+      size: {
+        default: "h-10 px-4 py-2",
+        sm: "h-9 rounded-md px-3",
+        lg: "h-11 rounded-md px-8",
+        icon: "h-10 w-10",
+      },
+    },
+    defaultVariants: {
+      variant: "default",
+      size: "default",
+    },
+  }
+)
+
+export interface ButtonProps
+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
+    VariantProps<typeof buttonVariants> {
+  asChild?: boolean
+}
+
+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
+  ({ className, variant, size, asChild = false, ...props }, ref) => {
+    const Comp = asChild ? Slot : "button"
+    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
+  }
+)
+Button.displayName = "Button"
+
+export { Button, buttonVariants }
diff --git a/src/components/ui/card.tsx b/src/components/ui/card.tsx
new file mode 100644
index 0000000..07f2c25
--- /dev/null
+++ b/src/components/ui/card.tsx
@@ -0,0 +1,63 @@
+import * as React from "react"
+
+import { cn } from "@/lib/utils"
+
+const Card = React.forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div
+    ref={ref}
+    className={cn(
+      "rounded-lg border bg-card text-card-foreground shadow-sm",
+      className
+    )}
+    {...props}
+  />
+))
+Card.displayName = "Card"
+
+const CardHeader = React.forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div
+    ref={ref}
+    className={cn("flex flex-col space-y-1.5 p-6", className)}
+    {...props}
+  />
+))
+CardHeader.displayName = "CardHeader"
+
+const CardTitle = React.forwardRef<
+  HTMLParagraphElement,
+  React.HTMLAttributes<HTMLHeadingElement>
+>(({ className, ...props }, ref) => (
+  <h3
+    ref={ref}
+    className={cn(
+      "text-2xl font-semibold leading-none tracking-tight",
+      className
+    )}
+    {...props}
+  />
+))
+CardTitle.displayName = "CardTitle"
+
+const CardDescription = React.forwardRef<
+  HTMLParagraphElement,
+  React.HTMLAttributes<HTMLParagraphElement>
+>(({ className, ...props }, ref) => (
+  <p
+    ref={ref}
+    className={cn("text-sm text-muted-foreground", className)}
+    {...props}
+  />
+))
+CardDescription.displayName = "CardDescription"
+
+const CardContent = React.forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
+))
+CardContent.displayName = "CardContent"
+
+const CardFooter = React.forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div
+    ref={ref}
+    className={cn("flex items-center p-6 pt-0", className)}
+    {...props}
+  />
+))
+CardFooter.displayName = "CardFooter"
+
+export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
diff --git a/src/index.css b/src/index.css
new file mode 100644
index 0000000..6976094
--- /dev/null
+++ b/src/index.css
@@ -0,0 +1,53 @@
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+@layer base {
+  :root {
+    --background: 0 0% 100%;
+    --foreground: 222.2 84% 4.9%;
+    --card: 0 0% 100%;
+    --card-foreground: 222.2 84% 4.9%;
+    --popover: 0 0% 100%;
+    --popover-foreground: 222.2 84% 4.9%;
+    --primary: 222.2 47.4% 11.2%;
+    --primary-foreground: 210 40% 98%;
+    --secondary: 210 40% 96.1%;
+    --secondary-foreground: 222.2 47.4% 11.2%;
+    --muted: 210 40% 96.1%;
+    --muted-foreground: 215.4 16.3% 46.9%;
+    --accent: 210 40% 96.1%;
+    --accent-foreground: 222.2 47.4% 11.2%;
+    --destructive: 0 84.2% 60.2%;
+    --destructive-foreground: 210 40% 98%;
+    --border: 214.3 31.8% 91.4%;
+    --input: 214.3 31.8% 91.4%;
+    --ring: 222.2 84% 4.9%;
+    --radius: 0.5rem;
+  }
+
+  .dark {
+    --background: 222.2 84% 4.9%;
+    --foreground: 210 40% 98%;
+    --card: 222.2 84% 4.9%;
+    --card-foreground: 210 40% 98%;
+    --popover: 222.2 84% 4.9%;
+    --popover-foreground: 210 40% 98%;
+    --primary: 210 40% 98%;
+    --primary-foreground: 222.2 47.4% 11.2%;
+    --secondary: 217.2 32.6% 17.5%;
+    --secondary-foreground: 210 40% 98%;
+    --muted: 217.2 32.6% 17.5%;
+    --muted-foreground: 215 20.2% 65.1%;
+    --accent: 217.2 32.6% 17.5%;
+    --accent-foreground: 210 40% 98%;
+    --destructive: 0 62.8% 30.6%;
+    --destructive-foreground: 210 40% 98%;
+    --border: 217.2 32.6% 17.5%;
+    --input: 217.2 32.6% 17.5%;
+    --ring: 212.7 26.8% 83.9%;
+  }
+}
+
+@layer base {
+  * { @apply border-border; }
+  body { @apply bg-background text-foreground; font-feature-settings: "rlig" 1, "calt" 1; }
+}
diff --git a/src/lib/utils.ts b/src/lib/utils.ts
new file mode 100644
index 0000000..a5f590e
--- /dev/null
+++ b/src/lib/utils.ts
@@ -0,0 +1,6 @@
+import { type ClassValue, clsx } from "clsx"
+import { twMerge } from "tailwind-merge"
+
+export function cn(...inputs: ClassValue[]) {
+  return twMerge(clsx(inputs))
+}
diff --git a/src/main.tsx b/src/main.tsx
new file mode 100644
index 0000000..895775a
--- /dev/null
+++ b/src/main.tsx
@@ -0,0 +1,16 @@
+import React from 'react'
+import ReactDOM from 'react-dom/client'
+import App from './App.tsx'
+import './index.css'
+import { BrowserRouter } from 'react-router-dom'
+import { ThemeProvider } from './components/theme-provider.tsx'
+
+ReactDOM.createRoot(document.getElementById('root')!).render(
+  <React.StrictMode>
+    <BrowserRouter>
+      <ThemeProvider defaultTheme="system" storageKey="jarss-ui-theme">
+        <App />
+      </ThemeProvider>
+    </BrowserRouter>
+  </React.StrictMode>,
+)
diff --git a/src/pages/Index.tsx b/src/pages/Index.tsx
new file mode 100644
index 0000000..3884d37
--- /dev/null
+++ b/src/pages/Index.tsx
@@ -0,0 +1,46 @@
+import { Button } from "@/components/ui/button";
+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
+
+export default function IndexPage() {
+  return (
+    <div className="container mx-auto py-10">
+      <header className="text-center mb-10">
+        <h1 className="text-4xl font-bold tracking-tight lg:text-5xl">Bienvenido a JARSS 1.0</h1>
+        <p className="mt-3 text-lg text-muted-foreground">
+          Su Sistema Integrado de Gestión Financiera y Administrativa.
+        </p>
+      </header>
+      
+      <section className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
+        <Card>
+          <CardHeader>
+            <CardTitle>Gestión Financiera</CardTitle>
+            <CardDescription>Registro de ingresos, gastos y transacciones.</CardDescription>
+          </CardHeader>
+          <CardContent>
+            <p className="text-sm text-muted-foreground">Automatice y optimice sus finanzas con herramientas intuitivas.</p>
+            <Button className="mt-4 w-full">Explorar Módulo</Button>
+          </CardContent>
+        </Card>
+        <Card>
+          <CardHeader>
+            <CardTitle>Cumplimiento Fiscal</CardTitle>
+            <CardDescription>Cálculo de impuestos y generación de reportes.</CardDescription>
+          </CardHeader>
+          <CardContent>
+            <p className="text-sm text-muted-foreground">Manténgase al día con sus obligaciones fiscales sin complicaciones.</p>
+            <Button className="mt-4 w-full">Explorar Módulo</Button>
+          </CardContent>
+        </Card>
+        <Card>
+          <CardHeader>
+            <CardTitle>Gestión de Nómina</CardTitle>
+            <CardDescription>Administración de empleados, sueldos y deducciones.</CardDescription>
+          </CardHeader>
+          <CardContent>
+            <p className="text-sm text-muted-foreground">Simplifique la gestión de su personal y asegure pagos precisos.</p>
+            <Button className="mt-4 w-full">Explorar Módulo</Button>
+          </CardContent>
+        </Card>
+      </section>
+
+      <section className="mt-12 p-6 border rounded-lg bg-card">
+        <h2 className="text-xl font-semibold mb-3">Credenciales de Prueba (Solo Desarrollo)</h2>
+        <div className="space-y-1 text-sm">
+          <p><strong>Usuario:</strong> <code className="bg-muted px-1 py-0.5 rounded">Admin Jarss</code></p>
+          <p><strong>Email:</strong> <code className="bg-muted px-1 py-0.5 rounded">admin@jarss.com</code></p>
+          <p><strong>Contraseña:</strong> <code className="bg-muted px-1 py-0.5 rounded">admin1234</code></p>
+          <p><strong>Rol:</strong> <code className="bg-muted px-1 py-0.5 rounded">admin</code></p>
+        </div>
+        <p className="mt-3 text-xs text-muted-foreground">Estas credenciales son para fines de demostración y desarrollo local.</p>
+      </section>
+    </div>
+  );
+}
diff --git a/src/pages/NotFound.tsx b/src/pages/NotFound.tsx
new file mode 100644
index 0000000..468d8cd
--- /dev/null
+++ b/src/pages/NotFound.tsx
@@ -0,0 +1,13 @@
+import { Button } from '@/components/ui/button';
+import { Link } from 'react-router-dom';
+
+export default function NotFoundPage() {
+  return (
+    <div className="flex flex-col items-center justify-center min-h-screen text-center p-4">
+      <h1 className="text-6xl font-bold text-primary">404</h1>
+      <p className="text-2xl mt-4 mb-2 text-foreground">Página No Encontrada</p>
+      <p className="text-muted-foreground mb-8">Lo sentimos, la página que busca no existe o ha sido movida.</p>
+      <Button asChild><Link to="/">Volver al Inicio</Link></Button>
+    </div>
+  );
+}
diff --git a/src/vite-env.d.ts b/src/vite-env.d.ts
new file mode 100644
index 0000000..98356a4
--- /dev/null
+++ b/src/vite-env.d.ts
@@ -0,0 +1 @@
+/// <reference types="vite/client" />
diff --git a/tailwind.config.ts b/tailwind.config.ts
new file mode 100644
index 0000000..74c646c
--- /dev/null
+++ b/tailwind.config.ts
@@ -0,0 +1,36 @@
+import type { Config } from 'tailwindcss'
+
+const config = {
+  darkMode: ["class"],
+  content: [
+    './pages/**/*.{ts,tsx}',
+    './components/**/*.{ts,tsx}',
+    './app/**/*.{ts,tsx}',
+    './src/**/*.{ts,tsx}',
+  ],
+  prefix: "",
+  theme: {
+    container: {
+      center: true,
+      padding: "2rem",
+      screens: {
+        "2xl": "1400px",
+      },
+    },
+    extend: {
+      colors: { /* Mapped from index.css variables for Tailwind intellisense */
+        border: "hsl(var(--border))",
+        input: "hsl(var(--input))",
+        ring: "hsl(var(--ring))",
+        background: "hsl(var(--background))",
+        foreground: "hsl(var(--foreground))",
+        primary: { DEFAULT: "hsl(var(--primary))", foreground: "hsl(var(--primary-foreground))" },
+        secondary: { DEFAULT: "hsl(var(--secondary))", foreground: "hsl(var(--secondary-foreground))" },
+        destructive: { DEFAULT: "hsl(var(--destructive))", foreground: "hsl(var(--destructive-foreground))" },
+        muted: { DEFAULT: "hsl(var(--muted))", foreground: "hsl(var(--muted-foreground))" },
+        accent: { DEFAULT: "hsl(var(--accent))", foreground: "hsl(var(--accent-foreground))" },
+        popover: { DEFAULT: "hsl(var(--popover))", foreground: "hsl(var(--popover-foreground))" },
+        card: { DEFAULT: "hsl(var(--card))", foreground: "hsl(var(--card-foreground))" },
+      },
+      borderRadius: { lg: "var(--radius)", md: "calc(var(--radius) - 2px)", sm: "calc(var(--radius) - 4px)" },
+      keyframes: {
+        "accordion-down": { from: { height: "0" }, to: { height: "var(--radix-accordion-content-height)" } },
+        "accordion-up": { from: { height: "var(--radix-accordion-content-height)" }, to: { height: "0" } },
+      },
+      animation: {
+        "accordion-down": "accordion-down 0.2s ease-out",
+        "accordion-up": "accordion-up 0.2s ease-out",
+      },
+    },
+  },
+  plugins: [require("tailwindcss-animate")],
+} satisfies Config
+
+export default config
diff --git a/tsconfig.json b/tsconfig.json
new file mode 100644
index 0000000..d5cb744
--- /dev/null
+++ b/tsconfig.json
@@ -0,0 +1,30 @@
+{
+  "compilerOptions": {
+    "target": "ES2020",
+    "useDefineForClassFields": true,
+    "lib": ["ES2020", "DOM", "DOM.Iterable"],
+    "module": "ESNext",
+    "skipLibCheck": true,
+
+    /* Bundler mode */
+    "moduleResolution": "bundler",
+    "allowImportingTsExtensions": true,
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "noEmit": true,
+    "jsx": "react-jsx",
+
+    /* Linting */
+    "strict": true,
+    "noUnusedLocals": true,
+    "noUnusedParameters": true,
+    "noFallthroughCasesInSwitch": true,
+
+    /* Aliases */
+    "baseUrl": ".",
+    "paths": {
+      "@/*": ["src/*"]
+    }
+  },
+  "include": ["src", "vite.config.ts", "tailwind.config.ts", "postcss.config.js", "eslint.config.js"],
+  "references": [{ "path": "./tsconfig.node.json" }]
+}
diff --git a/tsconfig.node.json b/tsconfig.node.json
new file mode 100644
index 0000000..1f30530
--- /dev/null
+++ b/tsconfig.node.json
@@ -0,0 +1,11 @@
+{
+  "compilerOptions": {
+    "composite": true,
+    "skipLibCheck": true,
+    "module": "ESNext",
+    "moduleResolution": "bundler",
+    "allowSyntheticDefaultImports": true,
+    "strict": true
+  },
+  "include": ["vite.config.ts", "tailwind.config.ts", "postcss.config.js", "eslint.config.js"]
+}
diff --git a/vite.config.ts b/vite.config.ts
new file mode 100644
index 0000000..4635a1d
--- /dev/null
+++ b/vite.config.ts
@@ -0,0 +1,20 @@
+import { defineConfig } from 'vite'
+import react from '@vitejs/plugin-react'
+import path from 'path'
+import fs from 'fs'
+
+// https://vitejs.dev/config/
+export default defineConfig({
+  plugins: [react()],
+  resolve: {
+    alias: {
+      "@": path.resolve(__dirname, "./src"),
+    },
+  },
+  server: {
+    https: {
+      key: fs.readFileSync('./certs/localhost-key.pem'),
+      cert: fs.readFileSync('./certs/localhost-cert.pem'),
+    },
+    port: 3000,
+  }
+})